{"version":3,"file":"embla-carousel-react.esm.js","sources":["src/components/utils.ts","src/components/index.ts"],"sourcesContent":["export function canUseDOM(): boolean {\n  return !!(\n    typeof window !== 'undefined' &&\n    window.document &&\n    window.document.createElement\n  )\n}\n","import { useRef, useEffect, useState } from 'react'\nimport { canUseDOM } from './utils'\nimport EmblaCarousel, {\n  EmblaCarouselType,\n  EmblaOptionsType,\n  EmblaPluginType,\n} from 'embla-carousel'\n\ntype EmblaViewportRefType = <ViewportElement extends HTMLElement>(\n  instance: ViewportElement | null,\n) => void\n\nexport type UseEmblaCarouselType = [\n  EmblaViewportRefType,\n  EmblaCarouselType | undefined,\n]\n\nfunction useEmblaCarousel(\n  options: EmblaOptionsType = {},\n  plugins: EmblaPluginType[] = [],\n): UseEmblaCarouselType {\n  const optionsHandler = useRef(EmblaCarousel.optionsHandler())\n  const storedOptions = useRef(options)\n  const storedPlugins = useRef(plugins)\n  const [embla, setEmbla] = useState<EmblaCarouselType>()\n  const [viewport, setViewport] = useState<HTMLElement>()\n\n  useEffect(() => {\n    if (canUseDOM() && viewport) {\n      EmblaCarousel.globalOptions = useEmblaCarousel.globalOptions\n      const newEmbla = EmblaCarousel(\n        viewport,\n        storedOptions.current,\n        storedPlugins.current,\n      )\n      setEmbla(newEmbla)\n      return () => newEmbla.destroy()\n    } else {\n      setEmbla(undefined)\n    }\n  }, [viewport, setEmbla])\n\n  useEffect(() => {\n    if (!embla) return\n    if (optionsHandler.current.areEqual(storedOptions.current, options)) return\n\n    storedOptions.current = options\n    storedPlugins.current = plugins\n    embla.reInit(storedOptions.current, storedPlugins.current)\n  }, [embla, options, plugins])\n\n  return [<EmblaViewportRefType>setViewport, embla]\n}\n\nuseEmblaCarousel.globalOptions = <EmblaOptionsType | undefined>undefined\n\nexport default useEmblaCarousel\n"],"names":["canUseDOM","window","document","createElement","useEmblaCarousel","options","plugins","optionsHandler","useRef","EmblaCarousel","storedOptions","storedPlugins","_a","useState","embla","setEmbla","_b","viewport","setViewport","useEffect","globalOptions","newEmbla_1","current","destroy","undefined","areEqual","reInit"],"mappings":";;;SAAgBA,YAAS;AACvB,EAAA,OAAO,CAAC,EACN,OAAOC,MAAP,KAAkB,WAAlB,IACAA,MAAM,CAACC,QADP,IAEAD,MAAM,CAACC,QAAP,CAAgBC,aAHV,CAAR,CAAA;AAKD;;ACWD,SAASC,gBAAT,CACEC,OADF,EAEEC,OAFF,EAEiC;AAD/B,EAAA,IAAAD,OAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,OAA8B,GAAA,EAA9B,CAAA;AAA8B,GAAA;;AAC9B,EAAA,IAAAC,OAAA,KAAA,KAAA,CAAA,EAAA;AAAAA,IAAAA,OAA+B,GAAA,EAA/B,CAAA;AAA+B,GAAA;;EAE/B,IAAMC,cAAc,GAAGC,MAAM,CAACC,aAAa,CAACF,cAAd,EAAD,CAA7B,CAAA;AACA,EAAA,IAAMG,aAAa,GAAGF,MAAM,CAACH,OAAD,CAA5B,CAAA;AACA,EAAA,IAAMM,aAAa,GAAGH,MAAM,CAACF,OAAD,CAA5B,CAAA;;EACM,IAAAM,EAAA,GAAoBC,QAAQ,EAA5B;AAAA,MAACC,KAAK,GAAAF,EAAA,CAAA,CAAA,CAAN;AAAA,MAAQG,QAAQ,GAAAH,EAAA,CAAA,CAAA,CAAhB,CAAA;;EACA,IAAAI,EAAA,GAA0BH,QAAQ,EAAlC;AAAA,MAACI,QAAQ,GAAAD,EAAA,CAAA,CAAA,CAAT;AAAA,MAAWE,WAAW,GAAAF,EAAA,CAAA,CAAA,CAAtB,CAAA;;AAENG,EAAAA,SAAS,CAAC,YAAA;IACR,IAAInB,SAAS,EAAMiB,IAAAA,QAAnB,EAA6B;AAC3BR,MAAAA,aAAa,CAACW,aAAd,GAA8BhB,gBAAgB,CAACgB,aAA/C,CAAA;AACA,MAAA,IAAMC,UAAQ,GAAGZ,aAAa,CAC5BQ,QAD4B,EAE5BP,aAAa,CAACY,OAFc,EAG5BX,aAAa,CAACW,OAHc,CAA9B,CAAA;MAKAP,QAAQ,CAACM,UAAD,CAAR,CAAA;AACA,MAAA,OAAO,YAAA;QAAM,OAAAA,UAAQ,CAACE,OAAT,EAAA,CAAA;OAAb,CAAA;AACD,KATD,MASO;MACLR,QAAQ,CAACS,SAAD,CAAR,CAAA;AACD,KAAA;AACF,GAbQ,EAaN,CAACP,QAAD,EAAWF,QAAX,CAbM,CAAT,CAAA;AAeAI,EAAAA,SAAS,CAAC,YAAA;IACR,IAAI,CAACL,KAAL,EAAY,OAAA;AACZ,IAAA,IAAIP,cAAc,CAACe,OAAf,CAAuBG,QAAvB,CAAgCf,aAAa,CAACY,OAA9C,EAAuDjB,OAAvD,CAAJ,EAAqE,OAAA;IAErEK,aAAa,CAACY,OAAd,GAAwBjB,OAAxB,CAAA;IACAM,aAAa,CAACW,OAAd,GAAwBhB,OAAxB,CAAA;IACAQ,KAAK,CAACY,MAAN,CAAahB,aAAa,CAACY,OAA3B,EAAoCX,aAAa,CAACW,OAAlD,CAAA,CAAA;GANO,EAON,CAACR,KAAD,EAAQT,OAAR,EAAiBC,OAAjB,CAPM,CAAT,CAAA;AASA,EAAA,OAAO,CAAuBY,WAAvB,EAAoCJ,KAApC,CAAP,CAAA;AACD,CAAA;;AAEDV,gBAAgB,CAACgB,aAAjB,GAA+DI,SAA/D;;;;"}